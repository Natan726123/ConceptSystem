unit uFormConsultaFichaFaccao;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.WinXCalendars, Vcl.StdCtrls, Vcl.ExtCtrls, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, uMainModulo, System.Rtti,
  System.Bindings.Outputs, Vcl.Bind.Editors, Data.Bind.EngExt,
  Vcl.Bind.DBEngExt, Data.Bind.Components, Data.Bind.DBScope, Math, DateUtils,
  Vcl.Imaging.pngimage, uFormRelFichaFaccao1via, uFormRelFichaFaccao2via;

type
  TFormConsultaFichaFaccao = class(TForm)
    pnlModelos: TPanel;
    lblDataCorte: TLabel;
    lblNumCorte: TLabel;
    lblNumOrdemCorte: TLabel;
    lblDataEnvio: TLabel;
    lblDataPrevista: TLabel;
    lblCortador: TLabel;
    lblDataEntrega: TLabel;
    lblStatusFaccao: TLabel;
    lblCodCortador: TLabel;
    btnGerarFicha: TButton;
    CalendarDataDeCorte: TCalendarPicker;
    edtNumCorte: TEdit;
    edtNumOrdemCorte: TEdit;
    CalendarDataDeEnvio: TCalendarPicker;
    CalendarDataPrevista: TCalendarPicker;
    ComboBoxCortador: TComboBox;
    CalendarDataDeEntrega: TCalendarPicker;
    btnSalvar: TButton;
    ComboBoxStatus: TComboBox;
    edtCodCortador: TEdit;
    DBGridFichaDeFaccao: TDBGrid;
    Label1: TLabel;
    DSDadosProdutos: TDataSource;
    FDQueryProdutos: TFDQuery;
    DSDadosFaccao: TDataSource;
    FDQueryFaccao: TFDQuery;
    FDQueryConsultaFichaFaccao: TFDQuery;
    DSDadosConsultaFichaFaccao: TDataSource;
    btnAlterar: TButton;
    BindSourceDB1: TBindSourceDB;
    BindingsList1: TBindingsList;
    LinkFillControlToField2: TLinkFillControlToField;
    LinkControlToField1: TLinkControlToField;
    LinkControlToField2: TLinkControlToField;
    LinkControlToField3: TLinkControlToField;
    LinkPropertyToFieldDateFormat: TLinkPropertyToField;
    UpdateSQLConsultaFicha: TFDUpdateSQL;
    LinkPropertyToFieldDate: TLinkPropertyToField;
    LinkPropertyToFieldDate2: TLinkPropertyToField;
    LinkPropertyToFieldDate3: TLinkPropertyToField;
    btnAttData: TButton;
    Image1: TImage;
    DSDadosFichaDeFaccao: TDataSource;
    FDQueryFichaDeFaccao: TFDQuery;
    FDQueryFichaDeFaccaoItem: TIntegerField;
    FDQueryFichaDeFaccaoCor: TStringField;
    FDQueryFichaDeFaccaoTamanho: TStringField;
    FDQueryFichaDeFaccaoQuantidade: TIntegerField;
    FDQueryFichaDeFaccaoCodProd: TIntegerField;
    FDQueryFichaDeFaccaoProduto: TStringField;
    FDQueryFichaDeFaccaoidFaccao: TIntegerField;
    FDQueryFichaDeFaccaoNumCorte: TIntegerField;
    FDQueryFichaDeFaccaoCodCort: TIntegerField;
    FDQueryFichaDeFaccaoCortador: TStringField;
    FDQueryFichaDeFaccaoCodFac: TIntegerField;
    FDQueryFichaDeFaccaoFacção: TStringField;
    FDQueryFichaDeFaccaoDatadeCorte: TDateField;
    FDQueryFichaDeFaccaoNumOrdem: TIntegerField;
    FDQueryFichaDeFaccaoDatadeEnvio: TDateField;
    FDQueryFichaDeFaccaoDatadePrevisão: TDateField;
    FDQueryFichaDeFaccaodatadeEntrega: TDateField;
    FDQueryFichaDeFaccaoStatus: TStringField;
    FDQueryRelFichaFaccao: TFDQuery;
    DSDadosRelFichaFaccao: TDataSource;
    edtNumFaccao: TEdit;
    Label4: TLabel;
    LinkControlToField4: TLinkControlToField;
    Label6: TLabel;
    edtCodFaccao2: TEdit;
    Label7: TLabel;
    edtNomeFaccao: TEdit;
    LinkControlToField5: TLinkControlToField;
    LinkControlToField6: TLinkControlToField;
    Label9: TLabel;
    edtModelo: TEdit;
    edtTotalPecas: TEdit;
    pnlFiltro: TPanel;
    lblSelecionarModelo: TLabel;
    lblCodRef: TLabel;
    lblRaddioButtonBusca: TLabel;
    lblFaccao: TLabel;
    lblCodFaccao: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label5: TLabel;
    Label8: TLabel;
    ComboBoxProdutos: TComboBox;
    edtCodRef: TEdit;
    rbBuscaCodigo: TRadioButton;
    rbBuscaReferencia: TRadioButton;
    ComboBoxFaccao: TComboBox;
    btnConsultarFicha: TButton;
    edtCodFaccao: TEdit;
    dtpDataInicial: TCalendarPicker;
    dtpDataFinal: TCalendarPicker;
    ComboBoxStatusConsulta: TComboBox;
    edtNumFichaDeFaccao: TEdit;
    lblModoEdicao: TLabel;
    btnLimparFiltros: TButton;
    procedure FormCreate(Sender: TObject);
    procedure PreencherComboBoxFaccao;
    procedure PreencherComboBoxProdutos;
    procedure PreencherComboboxStatus;
    procedure edtCodRefChange(Sender: TObject);
    procedure ComboBoxFaccaoChange(Sender: TObject);
    procedure btnConsultarFichaClick(Sender: TObject);
    procedure AjustarLarguraColunas(DBGrid: TDBGrid);
    procedure DSDadosConsultaFichaFaccaoDataChange(Sender: TObject;
      Field: TField);
    procedure btnSalvarClick(Sender: TObject);
    procedure btnGerarFichaClick(Sender: TObject);
    procedure imprimirFicha1via;
    procedure imprimirFicha2via;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure BuscarFichasPorStatus;
    procedure BuscarFichasPorParametros;
    procedure BuscarFichasDinamicamente;
    procedure btnAlterarClick(Sender: TObject);
    procedure HabilitarCampos;
    procedure DesabilitarCampos;
    procedure btnLimparFiltrosClick(Sender: TObject);
  private
    FAtualizandoCalendarios: Boolean; // Variável de controle
    idFaccaoAtivo: Integer;
    attDataEnvio, attDataPrevista, attDataEntrega : TDateTime;
  public
    { Public declarations }
  end;

var
  FormConsultaFichaFaccao: TFormConsultaFichaFaccao;

implementation

{$R *.dfm}

procedure TFormConsultaFichaFaccao.AjustarLarguraColunas(DBGrid: TDBGrid);
var
  i, largura: Integer;
begin
  DBGrid.Columns.BeginUpdate;
  try
    for i := 0 to DBGrid.Columns.Count - 1 do
    begin
      largura := DBGrid.Canvas.TextWidth(DBGrid.Columns[i].Title.Caption) + 20; // Título com padding
      DBGrid.Columns[i].Width := largura;

      DBGrid.DataSource.DataSet.First;
      while not DBGrid.DataSource.DataSet.Eof do
      begin
        largura := Max(largura, DBGrid.Canvas.TextWidth(DBGrid.DataSource.DataSet.Fields[i].AsString) + 20);
        DBGrid.DataSource.DataSet.Next;
      end;
      DBGrid.Columns[i].Width := largura;
    end;
  finally
    DBGrid.Columns.EndUpdate;
  end;
end;

procedure TFormConsultaFichaFaccao.PreencherComboBoxFaccao;
begin
  FDQueryFaccao.Open;
//
  ComboBoxFaccao.Items.Clear;
//
  while not FDQueryFaccao.Eof do
  begin
    ComboBoxFaccao.Items.AddObject(
      FDQueryFaccao.FieldByName('nomeFaccao').AsString,
      TObject(FDQueryFaccao.FieldByName('codFaccao').AsInteger)
    );
    FDQueryFaccao.Next;
  end;
end;

procedure TFormConsultaFichaFaccao.PreencherComboBoxProdutos;
begin
  FDQueryProdutos.Active := true;

  ComboBoxProdutos.Items.Clear;

  while not FDQueryProdutos.Eof do
    begin
      ComboBoxProdutos.Items.Add(FDQueryProdutos.FieldByName('Produto').AsString); // Adiciona os nomes dos produtos ao ComboBox
      FDQueryProdutos.Next;
    end;

  FDQueryProdutos.Close; // Fecha a consulta após carregar os dados
end;

procedure TFormConsultaFichaFaccao.PreencherComboboxStatus;
var
  CaminhoArquivo: string;
begin
  // Caminho do arquivo
  CaminhoArquivo := ExtractFilePath(ParamStr(0)) + 'lista-status-ficha.txt';

  // Verifica se o arquivo existe
  if not FileExists(CaminhoArquivo) then
  begin
    ShowMessage('Arquivo lista-cores.txt não encontrado!');
    Exit;
  end;

  // Limpa os itens do ComboBox e carrega do arquivo
  ComboBoxStatus.Items.Clear;
  ComboBoxStatus.Items.LoadFromFile(CaminhoArquivo);

  ComboBoxStatusConsulta.Items.Clear;
  ComboBoxStatusConsulta.Items.LoadFromFile(CaminhoArquivo);
end;

procedure TFormConsultaFichaFaccao.btnAlterarClick(Sender: TObject);
begin
  HabilitarCampos;
end;

procedure TFormConsultaFichaFaccao.btnConsultarFichaClick(Sender: TObject);
begin
  BuscarFichasDinamicamente;
  AjustarLarguraColunas(DBGridFichaDeFaccao);
  //DSDadosConsultaFichaFaccao.DataSet.Edit;
end;

procedure TFormConsultaFichaFaccao.btnGerarFichaClick(Sender: TObject);
var
  Dialog: TForm;
  BtnPrimeiraVia, BtnSegundaVia, BtnCancelar: TButton;
  FormWidth, FormHeight, ButtonSpacing, ButtonTop: Integer;
begin
  if FDQueryConsultaFichaFaccao.IsEmpty then
  begin
    ShowMessage('Nenhum dado encontrado para o relatório.');
    Exit;
  end;

  // Configurações gerais
  FormWidth := 400;       // Largura do formulário
  FormHeight := 100;      // Altura do formulário
  ButtonSpacing := 20;    // Espaçamento entre os botões
  ButtonTop := 50;       // Distância dos botões ao topo do formulário

  // Cria o formulário do diálogo
  Dialog := CreateMessageDialog('Deseja imprimir a 1° ou 2° via?', mtConfirmation, []);
  try
    Dialog.Caption := 'Escolha a via';
    Dialog.ClientWidth := FormWidth;  // Ajusta a largura do formulário
    Dialog.ClientHeight := FormHeight; // Ajusta a altura do formulário
    Dialog.Position := poScreenCenter; // Centraliza na tela

    // Cria o botão para a 1° via
    BtnPrimeiraVia := TButton.Create(Dialog);
    BtnPrimeiraVia.Parent := Dialog;
    BtnPrimeiraVia.Caption := '1° via';
    BtnPrimeiraVia.ModalResult := mrYes; // Define o resultado como mrYes
    BtnPrimeiraVia.Width := 70; // Largura do botão
    BtnPrimeiraVia.Top := ButtonTop;

    // Cria o botão para a 2° via
    BtnSegundaVia := TButton.Create(Dialog);
    BtnSegundaVia.Parent := Dialog;
    BtnSegundaVia.Caption := '2° via';
    BtnSegundaVia.ModalResult := mrNo; // Define o resultado como mrNo
    BtnSegundaVia.Width := 70;
    BtnSegundaVia.Top := ButtonTop;

    // Cria o botão de Cancelar
    BtnCancelar := TButton.Create(Dialog);
    BtnCancelar.Parent := Dialog;
    BtnCancelar.Caption := 'Cancelar';
    BtnCancelar.ModalResult := mrCancel; // Define o resultado como mrCancel
    BtnCancelar.Width := 70;
    BtnCancelar.Top := ButtonTop;

    // Calcula posições centralizadas
    BtnPrimeiraVia.Left := (FormWidth div 2) - BtnPrimeiraVia.Width - (ButtonSpacing div 2);
    BtnSegundaVia.Left := BtnPrimeiraVia.Left + BtnPrimeiraVia.Width + ButtonSpacing;
    BtnCancelar.Left := BtnSegundaVia.Left + BtnSegundaVia.Width + ButtonSpacing;

    // Exibe o diálogo
    case Dialog.ShowModal of
      mrYes:
        begin
          //ShowMessage('1° via selecionada');
          imprimirFicha1via;
        end;
      mrNo:
        begin
          //ShowMessage('2° via selecionada');
          imprimirFicha2via;
        end;
      mrCancel:
        ShowMessage('Operação cancelada.');
    end;
  finally
    Dialog.Free;
  end;

end;

procedure TFormConsultaFichaFaccao.btnLimparFiltrosClick(Sender: TObject);
begin
  edtCodRef.Clear;
  ComboBoxProdutos.Text := '';
  dtpDataInicial.Date := 00/00/0000;
  dtpDataFinal.Date := 00/00/0000;
  ComboBoxStatusConsulta.Text := '';
  edtNumFichaDeFaccao.Clear;
  edtCodFaccao.Clear;
  edtCodFaccao.Clear;
end;

procedure TFormConsultaFichaFaccao.btnSalvarClick(Sender: TObject);
begin
  if (ComboBoxFaccao.Text = '') then
  begin
    if Application.MessageBox('Deseja manter a ficha de facção sem faccionista referenciada? ', 'Atenção',
    MB_ICONQUESTION + MB_YESNO) = IDYES then
    begin
      attDataEnvio := CalendarDataDeEnvio.Date;
      attDataPrevista := CalendarDataPrevista.Date;
      attDataEntrega := CalendarDataDeEntrega.Date;

      // Validação se os campos necessários estão preenchidos
      if ComboBoxStatus.Text = '' then
      begin
        ShowMessage('Informe o status.');
        Exit;
      end;

      // Prepare o comando UPDATE para alterar os dados no banco
      FDQueryConsultaFichaFaccao.SQL.Text :=
        'UPDATE TBFichaDeFaccao ' +
        'SET dataCorte = :dataCorte, ' +
        '    dataEnvio = :dataEnvio, ' +
        '    dataPrevisao = :dataPrevisao, ' +
        '    dataEntrega = :dataEntrega, ' +
        '    statusOrdem = :statusOrdem, ' +
        '    codFaccao = :codFaccao, ' +
        '    nomeFaccao = :nomeFaccao ' +
        'WHERE idFaccao = :idFaccao';  // Certifique-se de passar o ID correto para o WHERE

      // Atribuindo os parâmetros com os valores dos campos e Calendars

      FDQueryConsultaFichaFaccao.ParamByName('dataCorte').AsDate := CalendarDataDeCorte.Date;
      FDQueryConsultaFichaFaccao.ParamByName('dataEnvio').AsDate := attDataEnvio; // CalendarDataDeEnvio.Date;
      FDQueryConsultaFichaFaccao.ParamByName('dataPrevisao').AsDate := attDataPrevista; //CalendarDataPrevista.Date;
      FDQueryConsultaFichaFaccao.ParamByName('dataEntrega').AsDate := attDataEntrega; //CalendarDataDeEntrega.Date;
      FDQueryConsultaFichaFaccao.ParamByName('statusOrdem').AsString := ComboBoxStatus.Text;
      FDQueryConsultaFichaFaccao.ParamByName('idFaccao').AsInteger := idFaccaoAtivo;
      FDQueryConsultaFichaFaccao.ParamByName('codFaccao').AsString := edtCodFaccao.Text;
      FDQueryConsultaFichaFaccao.ParamByName('nomeFaccao').AsString := ComboBoxFaccao.Text;

      // Executa o comando SQL para atualizar os dados no banco
      try
        FDQueryConsultaFichaFaccao.ExecSQL; // Executa o comando UPDATE
        ShowMessage('Dados atualizados com sucesso!');
      except
        on E: Exception do
          ShowMessage('Erro ao salvar os dados: ' + E.Message);
      end;
      PreencherComboBoxStatus;
      DesabilitarCampos;
    end
    else
    begin
      attDataEnvio := CalendarDataDeEnvio.Date;
      attDataPrevista := CalendarDataPrevista.Date;
      attDataEntrega := CalendarDataDeEntrega.Date;

      // Validação se os campos necessários estão preenchidos
      if ComboBoxStatus.Text = '' then
      begin
        ShowMessage('Informe o status.');
        Exit;
      end;

      // Prepare o comando UPDATE para alterar os dados no banco
      FDQueryConsultaFichaFaccao.SQL.Text :=
        'UPDATE TBFichaDeFaccao ' +
        'SET dataCorte = :dataCorte, ' +
        '    dataEnvio = :dataEnvio, ' +
        '    dataPrevisao = :dataPrevisao, ' +
        '    dataEntrega = :dataEntrega, ' +
        '    statusOrdem = :statusOrdem ' +
        'WHERE idFaccao = :idFaccao';  // Certifique-se de passar o ID correto para o WHERE

      // Atribuindo os parâmetros com os valores dos campos e Calendars

      FDQueryConsultaFichaFaccao.ParamByName('dataCorte').AsDate := CalendarDataDeCorte.Date;
      FDQueryConsultaFichaFaccao.ParamByName('dataEnvio').AsDate := attDataEnvio; // CalendarDataDeEnvio.Date;
      FDQueryConsultaFichaFaccao.ParamByName('dataPrevisao').AsDate := attDataPrevista; //CalendarDataPrevista.Date;
      FDQueryConsultaFichaFaccao.ParamByName('dataEntrega').AsDate := attDataEntrega; //CalendarDataDeEntrega.Date;
      FDQueryConsultaFichaFaccao.ParamByName('statusOrdem').AsString := ComboBoxStatus.Text;
      FDQueryConsultaFichaFaccao.ParamByName('idFaccao').AsInteger := idFaccaoAtivo;

      // Executa o comando SQL para atualizar os dados no banco
      try
        FDQueryConsultaFichaFaccao.ExecSQL; // Executa o comando UPDATE
        ShowMessage('Dados atualizados com sucesso!');
      except
        on E: Exception do
          ShowMessage('Erro ao salvar os dados: ' + E.Message);
      end;
      PreencherComboBoxStatus;
      DesabilitarCampos;
    end;
  end
  else
  begin
  attDataEnvio := CalendarDataDeEnvio.Date;
      attDataPrevista := CalendarDataPrevista.Date;
      attDataEntrega := CalendarDataDeEntrega.Date;

      // Validação se os campos necessários estão preenchidos
      if ComboBoxStatus.Text = '' then
      begin
        ShowMessage('Informe o status.');
        Exit;
      end;

      // Prepare o comando UPDATE para alterar os dados no banco
      FDQueryConsultaFichaFaccao.SQL.Text :=
        'UPDATE TBFichaDeFaccao ' +
        'SET dataCorte = :dataCorte, ' +
        '    dataEnvio = :dataEnvio, ' +
        '    dataPrevisao = :dataPrevisao, ' +
        '    dataEntrega = :dataEntrega, ' +
        '    statusOrdem = :statusOrdem, ' +
        '    codFaccao = :codFaccao, ' +
        '    nomeFaccao = :nomeFaccao ' +
        'WHERE idFaccao = :idFaccao';  // Certifique-se de passar o ID correto para o WHERE

      // Atribuindo os parâmetros com os valores dos campos e Calendars

      FDQueryConsultaFichaFaccao.ParamByName('dataCorte').AsDate := CalendarDataDeCorte.Date;
      FDQueryConsultaFichaFaccao.ParamByName('dataEnvio').AsDate := attDataEnvio; // CalendarDataDeEnvio.Date;
      FDQueryConsultaFichaFaccao.ParamByName('dataPrevisao').AsDate := attDataPrevista; //CalendarDataPrevista.Date;
      FDQueryConsultaFichaFaccao.ParamByName('dataEntrega').AsDate := attDataEntrega; //CalendarDataDeEntrega.Date;
      FDQueryConsultaFichaFaccao.ParamByName('statusOrdem').AsString := ComboBoxStatus.Text;
      FDQueryConsultaFichaFaccao.ParamByName('idFaccao').AsInteger := idFaccaoAtivo;
      FDQueryConsultaFichaFaccao.ParamByName('codFaccao').AsString := edtCodFaccao.Text;
      FDQueryConsultaFichaFaccao.ParamByName('nomeFaccao').AsString := ComboBoxFaccao.Text;

      // Executa o comando SQL para atualizar os dados no banco
      try
        FDQueryConsultaFichaFaccao.ExecSQL; // Executa o comando UPDATE
        ShowMessage('Dados atualizados com sucesso!');
      except
        on E: Exception do
          ShowMessage('Erro ao salvar os dados: ' + E.Message);
      end;
      PreencherComboBoxStatus;
      DesabilitarCampos;
  end;


end;

procedure TFormConsultaFichaFaccao.BuscarFichasDinamicamente;
var
  SQLBase, SQLWhere: string;
begin
  // Validações básicas
  if (Trim(ComboBoxProdutos.Text) = '') and (Trim(edtCodFaccao.Text) = '') and
     (Trim(edtNumFichaDeFaccao.Text) = '') and (ComboBoxStatusConsulta.ItemIndex = -1) and
     (dtpDataInicial.Date = 0) and (dtpDataFinal.Date = 0) then
  begin
    ShowMessage('Informe pelo menos um parâmetro para a busca.');
    Exit;
  end;

  // Monta a base da consulta
  SQLBase :=
    'SELECT idFaccao, codFaccao, nomeFaccao, dataCriacao, ' +
    '       nomeProduto AS Modelo, corTecido AS Cor, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''P'' THEN quantidadePecas ELSE 0 END) AS Tam_P, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''M'' THEN quantidadePecas ELSE 0 END) AS Tam_M, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''G'' THEN quantidadePecas ELSE 0 END) AS Tam_G, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''GG'' THEN quantidadePecas ELSE 0 END) AS Tam_GG, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''48'' THEN quantidadePecas ELSE 0 END) AS Tam_48, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''50'' THEN quantidadePecas ELSE 0 END) AS Tam_50, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''52'' THEN quantidadePecas ELSE 0 END) AS Tam_52, ' +
    '       statusOrdem AS Status, ' +
    '       STRFTIME(''%d/%m/%Y'', dataCorte) AS DataCorte, ' +
    '       STRFTIME(''%d/%m/%Y'', DataEnvio)  AS DataEnvio, ' +
    '       STRFTIME(''%d/%m/%Y'', DataPrevisao) AS DataPrevisao, ' +
    '       STRFTIME(''%d/%m/%Y'', DataEntrega) AS DataEntrega, ' +
    '       numCorte, numOrdem, codCortador, nomeCortador, ' +
    '       (SELECT SUM(quantidadePecas) ' +          // Subquery para total geral por ficha
    '        FROM TBFichaDeFaccao F2 ' +
    '        WHERE F2.idFaccao = TBFichaDeFaccao.idFaccao) AS TotalPorFicha ' +
    'FROM TBFichaDeFaccao ';

  // Adiciona as condições dinamicamente
  SQLWhere := 'WHERE 1=1 '; // Cláusula inicial sempre verdadeira para facilitar adições

  if Trim(ComboBoxProdutos.Text) <> '' then
    SQLWhere := SQLWhere + 'AND nomeProduto = :nomeProduto ';

  if Trim(edtCodFaccao.Text) <> '' then
    SQLWhere := SQLWhere + 'AND codFaccao = :codFaccao ';

  if Trim(edtNumFichaDeFaccao.Text) <> '' then
    SQLWhere := SQLWhere + 'AND idFaccao = :idFaccao ';

  if ComboBoxStatusConsulta.ItemIndex <> -1 then
    SQLWhere := SQLWhere + 'AND statusOrdem = :statusOrdem ';

  if (dtpDataInicial.Date > 0) and (dtpDataFinal.Date > 0) then
  begin
    if dtpDataInicial.Date > dtpDataFinal.Date then
    begin
      ShowMessage('A data inicial não pode ser maior que a data final.');
      Exit;
    end;
    SQLWhere := SQLWhere + 'AND dataCriacao BETWEEN :dataInicial AND :dataFinal ';
  end;

  // Completa a consulta
  SQLBase := SQLBase + SQLWhere +
    'GROUP BY idFaccao, codFaccao, nomeFaccao, nomeProduto, corTecido, statusOrdem ' +
    'ORDER BY idFaccao, dataCriacao, nomeProduto, corTecido';

  // Prepara a consulta
  FDQueryConsultaFichaFaccao.Close;
  FDQueryConsultaFichaFaccao.SQL.Text := SQLBase;

  // Atribui os parâmetros
  if Trim(ComboBoxProdutos.Text) <> '' then
    FDQueryConsultaFichaFaccao.ParamByName('nomeProduto').AsString := ComboBoxProdutos.Text;

  if Trim(edtCodFaccao.Text) <> '' then
    FDQueryConsultaFichaFaccao.ParamByName('codFaccao').AsInteger := StrToIntDef(edtCodFaccao.Text, 0);

  if Trim(edtNumFichaDeFaccao.Text) <> '' then
    FDQueryConsultaFichaFaccao.ParamByName('idFaccao').AsInteger := StrToIntDef(edtNumFichaDeFaccao.Text, 0);

  if ComboBoxStatusConsulta.ItemIndex <> -1 then
    FDQueryConsultaFichaFaccao.ParamByName('statusOrdem').AsString := ComboBoxStatusConsulta.Text;

  if (dtpDataInicial.Date > 0) and (dtpDataFinal.Date > 0) then
  begin
    FDQueryConsultaFichaFaccao.ParamByName('dataInicial').AsDate := dtpDataInicial.Date;
    FDQueryConsultaFichaFaccao.ParamByName('dataFinal').AsDate := dtpDataFinal.Date;
  end;

  // Executa a consulta
  try
    FDQueryConsultaFichaFaccao.Open;
  except
    on E: Exception do
      ShowMessage('Erro ao executar a consulta: ' + E.Message);
  end;
end;

procedure TFormConsultaFichaFaccao.BuscarFichasPorParametros;
begin
  if Trim(ComboboxProdutos.Text) = '' then
    begin
      ShowMessage('Informe o nome do produto.');
      Exit;
    end;

    if dtpDataInicial.Date > dtpDataFinal.Date then
    begin
      ShowMessage('A data inicial não pode ser maior que a data final.');
      Exit;
    end;

    // Prepara a consulta
    FDQueryConsultaFichaFaccao.Close;
    FDQueryConsultaFichaFaccao.SQL.Text :=
      'SELECT idFaccao, dataCriacao, ' +
      '       nomeProduto AS Modelo, ' +
      '       corTecido AS Cor, ' +
      '       SUM(CASE WHEN tamanhoPecas = ''P'' THEN quantidadePecas ELSE 0 END) AS Tam_P, ' +
      '       SUM(CASE WHEN tamanhoPecas = ''M'' THEN quantidadePecas ELSE 0 END) AS Tam_M, ' +
      '       SUM(CASE WHEN tamanhoPecas = ''G'' THEN quantidadePecas ELSE 0 END) AS Tam_G, ' +
      '       SUM(CASE WHEN tamanhoPecas = ''GG'' THEN quantidadePecas ELSE 0 END) AS Tam_GG, ' +
      '       SUM(CASE WHEN tamanhoPecas = ''48'' THEN quantidadePecas ELSE 0 END) AS Tam_48, ' +
      '       SUM(CASE WHEN tamanhoPecas = ''50'' THEN quantidadePecas ELSE 0 END) AS Tam_50, ' +
      '       SUM(CASE WHEN tamanhoPecas = ''52'' THEN quantidadePecas ELSE 0 END) AS Tam_52, ' +
      '       statusOrdem AS Status, ' +
      '       STRFTIME(''%d/%m/%Y'', dataCorte) AS DataCorte, ' +
      '       STRFTIME(''%d/%m/%Y'', DataEnvio)  AS DataEnvio, ' +
      '       STRFTIME(''%d/%m/%Y'', DataPrevisao) AS DataPrevisao, ' +
      '       STRFTIME(''%d/%m/%Y'', DataEntrega) AS DataEntrega, ' +
      '       numCorte, numOrdem, codCortador, nomeCortador ' +
      'FROM TBFichaDeFaccao ' +
      'WHERE nomeProduto = :nomeProduto AND ' +
      '      codFaccao = :codFaccao AND ' +
      '      dataCriacao BETWEEN :dataInicial AND :dataFinal ' +
      'GROUP BY nomeProduto, corTecido, statusOrdem ' +
      'ORDER BY idFaccao, dataCriacao, nomeProduto, corTecido';

    // Atribui os parâmetros
    FDQueryConsultaFichaFaccao.ParamByName('nomeProduto').AsString := ComboBoxProdutos.Text;
    FDQueryConsultaFichaFaccao.ParamByName('codFaccao').AsInteger := StrToIntDef(edtCodFaccao.Text, 0);
    FDQueryConsultaFichaFaccao.ParamByName('dataInicial').AsDate := dtpDataInicial.Date;
    FDQueryConsultaFichaFaccao.ParamByName('dataFinal').AsDate := dtpDataFinal.Date;

    // Executa a consulta
    try
      FDQueryConsultaFichaFaccao.Open;
    except
      on E: Exception do
        ShowMessage('Erro ao executar a consulta: ' + E.Message);
    end;
end;

procedure TFormConsultaFichaFaccao.BuscarFichasPorStatus;
begin
  FDQueryConsultaFichaFaccao.Close;
  FDQueryConsultaFichaFaccao.SQL.Text :=
    'SELECT idFaccao, dataCriacao, ' +
    '       nomeProduto AS Modelo, ' +
    '       corTecido AS Cor, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''P'' THEN quantidadePecas ELSE 0 END) AS Tam_P, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''M'' THEN quantidadePecas ELSE 0 END) AS Tam_M, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''G'' THEN quantidadePecas ELSE 0 END) AS Tam_G, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''GG'' THEN quantidadePecas ELSE 0 END) AS Tam_GG, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''48'' THEN quantidadePecas ELSE 0 END) AS Tam_48, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''50'' THEN quantidadePecas ELSE 0 END) AS Tam_50, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''52'' THEN quantidadePecas ELSE 0 END) AS Tam_52, ' +
    '       statusOrdem, ' +
    '       STRFTIME(''%d/%m/%Y'', dataCorte) AS DataCorte, ' +
    '       STRFTIME(''%d/%m/%Y'', DataEnvio)  AS DataEnvio, ' +
    '       STRFTIME(''%d/%m/%Y'', DataPrevisao) AS DataPrevisao, ' +
    '       STRFTIME(''%d/%m/%Y'', DataEntrega) AS DataEntrega, ' +
    '       numCorte, numOrdem, codCortador, nomeCortador ' +
    'FROM TBFichaDeFaccao ' +
    'WHERE statusOrdem = :statusOrdem AND' + // Certifique-se de incluir o espaço no final
    '      dataCriacao BETWEEN :dataInicial AND :dataFinal ' +
    'GROUP BY nomeProduto, corTecido, statusOrdem ' +
    'ORDER BY idFaccao, dataCriacao, nomeProduto, corTecido';

  // Atribui os parâmetros
    FDQueryConsultaFichaFaccao.ParamByName('statusOrdem').AsString := ComboBoxStatusConsulta.Text;
    FDQueryConsultaFichaFaccao.ParamByName('dataInicial').AsDate := dtpDataInicial.Date;
    FDQueryConsultaFichaFaccao.ParamByName('dataFinal').AsDate := dtpDataFinal.Date;

    // Executa a consulta
    try
      FDQueryConsultaFichaFaccao.Open;
    except
      on E: Exception do
        ShowMessage('Erro ao executar a consulta: ' + E.Message);
    end;
end;

procedure TFormConsultaFichaFaccao.ComboBoxFaccaoChange(Sender: TObject);
begin
if ComboBoxFaccao.ItemIndex <> -1 then
    edtCodFaccao.Text := IntToStr(Integer(ComboBoxFaccao.Items.Objects[ComboBoxFaccao.ItemIndex]));
end;

procedure TFormConsultaFichaFaccao.DesabilitarCampos;
begin
  lblDataEnvio.Enabled := false;
  CalendarDataDeEnvio.Enabled := false;
  lblDataPrevista.Enabled := false;
  CalendarDataPrevista.Enabled := false;
  lblDataEntrega.Enabled := false;
  CalendarDataDeEntrega.Enabled := false;
  lblStatusFaccao.Enabled := false;
  ComboBoxStatus.Enabled := false;
  lblModoEdicao.Visible := false;
end;

procedure TFormConsultaFichaFaccao.DSDadosConsultaFichaFaccaoDataChange(
  Sender: TObject; Field: TField);
var
  dataCorte, dataEnvio, dataPrevisao, dataEntrega: TDateTime;
begin
  FAtualizandoCalendarios := True;
  try
    // Converte as datas do banco para o formato do calendário (dd/mm/yyyy)
    if TryStrToDate(FDQueryConsultaFichaFaccao.FieldByName('dataCorte').AsString, dataCorte) then
      CalendarDataDeCorte.Date := dataCorte
    else
      CalendarDataDeCorte.Date := now;

    if TryStrToDate(FDQueryConsultaFichaFaccao.FieldByName('dataEnvio').AsString, dataEnvio) then
      CalendarDataDeEnvio.Date := dataEnvio ;
//    else
//      CalendarDataDeEnvio.Date := now;

    if TryStrToDate(FDQueryConsultaFichaFaccao.FieldByName('dataPrevisao').AsString, dataPrevisao) then
      CalendarDataPrevista.Date := dataPrevisao   ;
//    else
//      CalendarDataPrevista.Date := now;

    if TryStrToDate(FDQueryConsultaFichaFaccao.FieldByName('dataEntrega').AsString, dataEntrega) then
      CalendarDataDeEntrega.Date := dataEntrega ;
//    else
//      CalendarDataDeEntrega.Date := now;
    idFaccaoAtivo := FDQueryConsultaFichaFaccao.FieldByName('idFaccao').AsInteger;

    edtModelo.Text := FDQueryConsultaFichaFaccao.FieldByName('Modelo').AsString;

    edtTotalPecas.Text := FDQueryConsultaFichaFaccao.FieldByName('TotalPorFicha').AsString;

  finally
    FAtualizandoCalendarios := False;
  end;

end;


procedure TFormConsultaFichaFaccao.edtCodRefChange(Sender: TObject);
var
  CodigoProduto: String;
  RefProduto: String;
begin
  if rbBuscaCodigo.Checked then
  begin
    CodigoProduto := Trim(edtCodRef.Text); // Captura e limpa o texto digitado no TEdit

  // Busca o nome do produto correspondente ao código digitado
  FDQueryProdutos.Close;
  FDQueryProdutos.SQL.Text := 'SELECT nomeProduto as Produto FROM TBProdutos WHERE codProduto = :codProduto';
  FDQueryProdutos.ParamByName('codProduto').AsString := CodigoProduto;
  FDQueryProdutos.Open;

  if not FDQueryProdutos.IsEmpty then
  begin
    // Atualiza o ComboBox com o produto encontrado
    ComboBoxProdutos.Text := FDQueryProdutos.FieldByName('Produto').AsString;

    // Dispara manualmente o evento OnChange do ComboBox
    if Assigned(ComboBoxProdutos.OnChange) then
      ComboBoxProdutos.OnChange(ComboBoxProdutos);
  end
  else
  begin
    // Caso não encontre, limpa o ComboBox
    ComboBoxProdutos.Text := '';
  end;

  FDQueryProdutos.Close; // Fecha a consulta após uso
  end;


  if rbBuscaReferencia.Checked then
  begin
    RefProduto := Trim(edtCodRef.Text); // Captura e limpa o texto digitado no TEdit

  // Busca o nome do produto correspondente à referência digitada
    FDQueryProdutos.Close;
    FDQueryProdutos.SQL.Text := 'SELECT nomeProduto as Produto FROM TBProdutos WHERE refProduto = :refProduto';
    FDQueryProdutos.ParamByName('refProduto').AsString := RefProduto;
    FDQueryProdutos.Open;

    if not FDQueryProdutos.IsEmpty then
    begin
      // Atualiza o ComboBox com o produto encontrado
      ComboBoxProdutos.Text := FDQueryProdutos.FieldByName('Produto').AsString;

      // Dispara manualmente o evento OnChange do ComboBox
      if Assigned(ComboBoxProdutos.OnChange) then
        ComboBoxProdutos.OnChange(ComboBoxProdutos);
    end
    else
    begin
      // Caso não encontre, limpa o ComboBox
      ComboBoxProdutos.Text := '';
    end;

    FDQueryProdutos.Close; // Fecha a consulta após uso
  end;

end;

procedure TFormConsultaFichaFaccao.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  FormConsultaFichaFaccao := nil;
end;

procedure TFormConsultaFichaFaccao.FormCreate(Sender: TObject);
begin
  FAtualizandoCalendarios := false;
  PreencherComboBoxFaccao;
  PreencherComboBoxStatus;
  PreencherComboBoxProdutos;
end;

procedure TFormConsultaFichaFaccao.HabilitarCampos;
begin
  lblDataEnvio.Enabled := true;
  CalendarDataDeEnvio.Enabled := true;
  lblDataPrevista.Enabled := true;
  CalendarDataPrevista.Enabled := true;
  lblDataEntrega.Enabled := true;
  CalendarDataDeEntrega.Enabled := true;
  lblStatusFaccao.Enabled := true;
  ComboBoxStatus.Enabled := true;
  lblModoEdicao.Visible := true;
end;

procedure TFormConsultaFichaFaccao.imprimirFicha1via;
begin
  if not Assigned(FormRelFichaFaccao1via) then
    FormRelFichaFaccao1via := TFormRelFichaFaccao1via.Create(Self);

  FormRelFichaFaccao1via.QRLabelNumFaccao.Caption := 'FICHA N°: ';
  FormRelFichaFaccao1via.QRLabelNumFaccao.Caption := FormRelFichaFaccao1via.QRLabelNumFaccao.Caption + edtNumFaccao.Text;

  FormRelFichaFaccao1via.QRLabelModelo.Caption := 'MODELO: ';
  FormRelFichaFaccao1via.QRLabelModelo.Caption := FormRelFichaFaccao1via.QRLabelModelo.Caption + edtModelo.Text;

  FormRelFichaFaccao1via.QRLabelNomeFaccao.Caption := 'FACÇÃO: ';
  FormRelFichaFaccao1via.QRLabelNomeFaccao.Caption := FormRelFichaFaccao1via.QRLabelNomeFaccao.Caption + edtNomeFaccao.Text;

  FormRelFichaFaccao1via.QRLabelNumCorte.Caption := 'N° CORTE: ';
  FormRelFichaFaccao1via.QRLabelNumCorte.Caption := FormRelFichaFaccao1via.QRLabelNumCorte.Caption + edtNumCorte.Text;

  FormRelFichaFaccao1via.QRLabelNumOrdemCorte.Caption := 'N° ORDEM DE CORTE: ';
  FormRelFichaFaccao1via.QRLabelNumOrdemCorte.Caption := FormRelFichaFaccao1via.QRLabelNumOrdemCorte.Caption + edtNumOrdemCorte.Text;

  FormRelFichaFaccao1via.QRLabelNomeCortador.Caption := 'CORTADOR: ';
  FormRelFichaFaccao1via.QRLabelNomeCortador.Caption := FormRelFichaFaccao1via.QRLabelNomeCortador.Caption + ComboBoxCortador.Text;

  FormRelFichaFaccao1via.QRLabelDataCorte.Caption := 'DATA DE CORTE: ';
  FormRelFichaFaccao1via.QRLabelDataCorte.Caption := FormRelFichaFaccao1via.QRLabelDataCorte.Caption + DateToStr(CalendarDataDeCorte.Date);

  //ENVIO: _____/ _____/ _____
  FormRelFichaFaccao1via.QRLabelDataEnvio.Caption := 'ENVIO: ';
  if (CalendarDataDeEnvio.IsEmpty) or (DateToStr(CalendarDataDeEnvio.Date) = '30/12/1899')  then
    FormRelFichaFaccao1via.QRLabelDataEnvio.Caption := 'ENVIO: _____/ _____/ _____'
  else
  FormRelFichaFaccao1via.QRLabelDataEnvio.Caption := FormRelFichaFaccao1via.QRLabelDataEnvio.Caption + DateToStr(CalendarDataDeEnvio.Date);

  //PREVISÃO: _____/ _____/ _____
  FormRelFichaFaccao1via.QRLabelDataPrevista.Caption := 'PREVISÃO: ';
  if (CalendarDataPrevista.IsEmpty) or (DateToStr(CalendarDataPrevista.Date) = '30/12/1899') then
    FormRelFichaFaccao1via.QRLabelDataPrevista.Caption := 'PREVISÃO: _____/ _____/ _____'
  else
  FormRelFichaFaccao1via.QRLabelDataPrevista.Caption := FormRelFichaFaccao1via.QRLabelDataPrevista.Caption + DateToStr(CalendarDataPrevista.Date);

  //ENTREGA: _____/ _____/ _____
  FormRelFichaFaccao1via.QRLabelDataEntrega.Caption := 'ENTREGA: ';
  if (CalendarDataDeEntrega.IsEmpty) or (DateToStr(CalendarDataDeEntrega.Date) = '30/12/1899')  then
    FormRelFichaFaccao1via.QRLabelDataEntrega.Caption := 'ENTREGA: _____/ _____/ _____'
  else
  FormRelFichaFaccao1via.QRLabelDataEntrega.Caption := FormRelFichaFaccao1via.QRLabelDataEntrega.Caption + DateToStr(CalendarDataDeEntrega.Date);

  FormRelFichaFaccao1via.QRLabelNumTotalPecas.Caption := 'N° DE PEÇAS: ';
  FormRelFichaFaccao1via.QRLabelNumTotalPecas.Caption := FormRelFichaFaccao1via.QRLabelNumTotalPecas.Caption + edtTotalPecas.Text;

  FormRelFichaFaccao1via.QRLabelModeloHeader.Caption := 'MODELO';
  FormRelFichaFaccao1via.QRLabelModeloHeader.Caption := edtModelo.Text;
  //QRLabelModeloHeader

  FormRelFichaFaccao1via.FDQueryRelFichaFaccao.Close;

  FormRelFichaFaccao1via.FDQueryRelFichaFaccao.SQL.Text :=
  'SELECT ' +
  '    f.idFaccao AS Num_Faccao, ' +
  '    f.corTecido AS Cor, ' +
  '    p.nomeTecido AS Tecido, ' +
  '    p.fichaTecnica AS Ficha_Tecnica, ' +
  '    SUM(CASE WHEN f.tamanhoPecas = ''P'' THEN f.quantidadePecas ELSE 0 END) AS Tam_P, ' +
  '    SUM(CASE WHEN f.tamanhoPecas = ''M'' THEN f.quantidadePecas ELSE 0 END) AS Tam_M, ' +
  '    SUM(CASE WHEN f.tamanhoPecas = ''G'' THEN f.quantidadePecas ELSE 0 END) AS Tam_G, ' +
  '    SUM(CASE WHEN f.tamanhoPecas = ''GG'' THEN f.quantidadePecas ELSE 0 END) AS Tam_GG, ' +
  '    SUM(CASE WHEN f.tamanhoPecas = ''48'' THEN f.quantidadePecas ELSE 0 END) AS Tam_48, ' +
  '    SUM(CASE WHEN f.tamanhoPecas = ''50'' THEN f.quantidadePecas ELSE 0 END) AS Tam_50, ' +
  '    SUM(CASE WHEN f.tamanhoPecas = ''52'' THEN f.quantidadePecas ELSE 0 END) AS Tam_52, ' +
  '    SUM(f.quantidadePecas) AS Total_Pecas_Cor, ' +
  '    SUM(f.quantidadePecas * p.aviamentoProduto) AS Total_Aviamento, ' +
  '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''P'') AS Total_Tam_P, ' +
  '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''M'') AS Total_Tam_M, ' +
  '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''G'') AS Total_Tam_G, ' +
  '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''GG'') AS Total_Tam_GG, ' +
  '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''48'') AS Total_Tam_48, ' +
  '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''50'') AS Total_Tam_50, ' +
  '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''52'') AS Total_Tam_52, ' +
  '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao) AS Total_Pecas   ' +
  'FROM ' +
  '    TBFichaDeFaccao f ' +
  'JOIN ' +
  '    TBprodutos p ON f.codProduto = p.codProduto ' +
  'WHERE ' +
  '    f.idFaccao = :idFaccao ' +
  'GROUP BY ' +
  '    f.idFaccao, f.corTecido, p.fichaTecnica, p.nomeTecido ' +
  'ORDER BY ' +
  '    f.corTecido;';

  // Atribuir o valor do parâmetro
  FormRelFichaFaccao1via.FDQueryRelFichaFaccao.ParamByName('idFaccao').AsInteger := StrToInt(edtNumFaccao.text);

  try
    FormRelFichaFaccao1via.FDQueryRelFichaFaccao.Open; // Executa a consulta
  except
    on E: Exception do
      ShowMessage('Erro ao gerar o relatório: ' + E.Message);
  end;


  FormRelFichaFaccao1via.QuickRepFichaFaccao.Preview;
end;

procedure TFormConsultaFichaFaccao.imprimirFicha2via;
begin
  if not Assigned(FormRelFichaFaccao2via) then
    FormRelFichaFaccao2via := TFormRelFichaFaccao2via.Create(Self);

  FormRelFichaFaccao2via.QRLabelNumFaccao.Caption := 'FICHA N°: ';
  FormRelFichaFaccao2via.QRLabelNumFaccao.Caption := FormRelFichaFaccao2via.QRLabelNumFaccao.Caption + edtNumFaccao.Text;



  FormRelFichaFaccao2via.QRLabelNomeFaccao.Caption := 'FACÇÃO: ';
  FormRelFichaFaccao2via.QRLabelNomeFaccao.Caption := FormRelFichaFaccao2via.QRLabelNomeFaccao.Caption + edtNomeFaccao.Text;

  FormRelFichaFaccao2via.QRLabelNumCorte.Caption := 'N° CORTE: ';
  FormRelFichaFaccao2via.QRLabelNumCorte.Caption := FormRelFichaFaccao2via.QRLabelNumCorte.Caption + edtNumCorte.Text;

  FormRelFichaFaccao2via.QRLabelNumOrdemCorte.Caption := 'N° ORDEM DE CORTE: ';
  FormRelFichaFaccao2via.QRLabelNumOrdemCorte.Caption := FormRelFichaFaccao2via.QRLabelNumOrdemCorte.Caption + edtNumOrdemCorte.Text;

  FormRelFichaFaccao2via.QRLabelNomeCortador.Caption := 'CORTADOR: ';
  FormRelFichaFaccao2via.QRLabelNomeCortador.Caption := FormRelFichaFaccao2via.QRLabelNomeCortador.Caption + ComboBoxCortador.Text;

  FormRelFichaFaccao2via.QRLabelDataCorte.Caption := 'DATA DE CORTE: ';
  FormRelFichaFaccao2via.QRLabelDataCorte.Caption := FormRelFichaFaccao2via.QRLabelDataCorte.Caption + DateToStr(CalendarDataDeCorte.Date);

  FormRelFichaFaccao2via.QRLabelNumTotalPecas.Caption := 'N° DE PEÇAS: ';
  FormRelFichaFaccao2via.QRLabelNumTotalPecas.Caption := FormRelFichaFaccao2via.QRLabelNumTotalPecas.Caption + edtTotalPecas.Text;

  //ENVIO: _____/ _____/ _____
  FormRelFichaFaccao2via.QRLabelDataEnvio.Caption := 'ENVIO: ';
  if (CalendarDataDeEnvio.IsEmpty) or (DateToStr(CalendarDataDeEnvio.Date) = '30/12/1899')  then
    FormRelFichaFaccao2via.QRLabelDataEnvio.Caption := 'ENVIO: _____/ _____/ _____'
  else
  FormRelFichaFaccao2via.QRLabelDataEnvio.Caption := FormRelFichaFaccao2via.QRLabelDataEnvio.Caption + DateToStr(CalendarDataDeEnvio.Date);

  //PREVISÃO: _____/ _____/ _____
  FormRelFichaFaccao2via.QRLabelDataPrevista.Caption := 'PREVISÃO: ';
  if (CalendarDataPrevista.IsEmpty) or (DateToStr(CalendarDataPrevista.Date) = '30/12/1899') then
    FormRelFichaFaccao2via.QRLabelDataPrevista.Caption := 'PREVISÃO: _____/ _____/ _____'
  else
  FormRelFichaFaccao2via.QRLabelDataPrevista.Caption := FormRelFichaFaccao2via.QRLabelDataPrevista.Caption + DateToStr(CalendarDataPrevista.Date);

  //ENTREGA: _____/ _____/ _____
  FormRelFichaFaccao2via.QRLabelDataEntrega.Caption := 'ENTREGA: ';
  if (CalendarDataDeEntrega.IsEmpty) or (DateToStr(CalendarDataDeEntrega.Date) = '30/12/1899')  then
    FormRelFichaFaccao2via.QRLabelDataEntrega.Caption := 'ENTREGA: _____/ _____/ _____'
  else
  FormRelFichaFaccao2via.QRLabelDataEntrega.Caption := FormRelFichaFaccao2via.QRLabelDataEntrega.Caption + DateToStr(CalendarDataDeEntrega.Date);


  FormRelFichaFaccao2via.QRLabelModeloHeader.Caption := 'MODELO';
  FormRelFichaFaccao2via.QRLabelModeloHeader.Caption := edtModelo.Text;

  FormRelFichaFaccao2via.QRLabelModelo.Caption := 'MODELO: ';
  FormRelFichaFaccao2via.QRLabelModelo.Caption := FormRelFichaFaccao2via.QRLabelModelo.Caption + edtModelo.Text;

  //QRLabelModeloHeader

  FormRelFichaFaccao2via.FDQueryRelFichaFaccao.Close;
  FormRelFichaFaccao2via.FDQueryRelFichaFaccao.SQL.Text :=
    'SELECT ' +
    '    f.idFaccao AS Num_Faccao, ' +
    '    f.corTecido AS Cor, ' +
    '    p.nomeTecido AS Tecido, ' +
    '    p.fichaTecnica AS Ficha_Tecnica, ' +
    '    SUM(CASE WHEN f.tamanhoPecas = ''P'' THEN f.quantidadePecas ELSE 0 END) AS Tam_P, ' +
    '    SUM(CASE WHEN f.tamanhoPecas = ''M'' THEN f.quantidadePecas ELSE 0 END) AS Tam_M, ' +
    '    SUM(CASE WHEN f.tamanhoPecas = ''G'' THEN f.quantidadePecas ELSE 0 END) AS Tam_G, ' +
    '    SUM(CASE WHEN f.tamanhoPecas = ''GG'' THEN f.quantidadePecas ELSE 0 END) AS Tam_GG, ' +
    '    SUM(CASE WHEN f.tamanhoPecas = ''48'' THEN f.quantidadePecas ELSE 0 END) AS Tam_48, ' +
    '    SUM(CASE WHEN f.tamanhoPecas = ''50'' THEN f.quantidadePecas ELSE 0 END) AS Tam_50, ' +
    '    SUM(CASE WHEN f.tamanhoPecas = ''52'' THEN f.quantidadePecas ELSE 0 END) AS Tam_52, ' +
    '    SUM(f.quantidadePecas) AS Total_Pecas_Cor, ' +
    '    SUM(f.quantidadePecas * p.aviamentoProduto) AS Total_Aviamento, ' +
    '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''P'') AS Total_Tam_P, ' +
    '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''M'') AS Total_Tam_M, ' +
    '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''G'') AS Total_Tam_G, ' +
    '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''GG'') AS Total_Tam_GG, ' +
    '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''48'') AS Total_Tam_48, ' +
    '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''50'') AS Total_Tam_50, ' +
    '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao AND f2.tamanhoPecas = ''52'') AS Total_Tam_52, ' +
    '    (SELECT SUM(f2.quantidadePecas) FROM TBFichaDeFaccao f2 WHERE f2.idFaccao = f.idFaccao) AS Total_Pecas ' +
    'FROM ' +
    '    TBFichaDeFaccao f ' +
    'JOIN ' +
    '    TBprodutos p ON f.codProduto = p.codProduto ' +
    'WHERE ' +
    '    f.idFaccao = :idFaccao ' +
    'GROUP BY ' +
    '    f.idFaccao, f.corTecido, p.fichaTecnica, p.nomeTecido ' +
    'ORDER BY ' +
    '    f.corTecido;';

  FormRelFichaFaccao2via.FDQueryRelFichaFaccao.ParamByName('idFaccao').AsInteger := StrToInt(edtNumFaccao.Text);
  FormRelFichaFaccao2via.FDQueryRelFichaFaccao.Open;

  // Verificar se há registros antes de acessar os campos
  if not FormRelFichaFaccao2via.FDQueryRelFichaFaccao.IsEmpty then
  begin
    // Atualizar o texto do label com o valor de Total_Pecas
    FormRelFichaFaccao2via.QRLabelNumTotalPecas.Caption :=
      'N° DE PEÇAS: ' + FormRelFichaFaccao2via.FDQueryRelFichaFaccao.FieldByName('Total_Pecas').AsString;
  end
  else
  begin
    FormRelFichaFaccao2via.QRLabelNumTotalPecas.Caption := 'Nenhum dado encontrado.';
  end;
  try
    FormRelFichaFaccao2via.FDQueryRelFichaFaccao.Open; // Executa a consulta
  except
    on E: Exception do
      ShowMessage('Erro ao gerar o relatório: ' + E.Message);
  end;


  FormRelFichaFaccao2via.QuickRepFichaFaccao.Preview;
end;

end.
