unit uFormConsultaFichaFaccao;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.WinXCalendars, Vcl.StdCtrls, Vcl.ExtCtrls, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, uMainModulo, System.Rtti,
  System.Bindings.Outputs, Vcl.Bind.Editors, Data.Bind.EngExt,
  Vcl.Bind.DBEngExt, Data.Bind.Components, Data.Bind.DBScope, Math, DateUtils,
  Vcl.Imaging.pngimage;

type
  TFormConsultaFichaFaccao = class(TForm)
    pnlModelos: TPanel;
    lblSelecionarModelo: TLabel;
    lblCodRef: TLabel;
    lblRaddioButtonBusca: TLabel;
    lblDataCorte: TLabel;
    lblFaccao: TLabel;
    lblNumCorte: TLabel;
    lblNumOrdemCorte: TLabel;
    lblDataEnvio: TLabel;
    lblDataPrevista: TLabel;
    lblCortador: TLabel;
    lblDataEntrega: TLabel;
    lblStatusFaccao: TLabel;
    lblCodCortador: TLabel;
    lblCodFaccao: TLabel;
    ComboBoxProdutos: TComboBox;
    btnGerarFicha: TButton;
    edtCodRef: TEdit;
    rbBuscaCodigo: TRadioButton;
    rbBuscaReferencia: TRadioButton;
    CalendarDataDeCorte: TCalendarPicker;
    ComboBoxFaccao: TComboBox;
    edtNumCorte: TEdit;
    edtNumOrdemCorte: TEdit;
    CalendarDataDeEnvio: TCalendarPicker;
    CalendarDataPrevista: TCalendarPicker;
    ComboBoxCortador: TComboBox;
    btnConsultarFicha: TButton;
    CalendarDataDeEntrega: TCalendarPicker;
    btnSalvar: TButton;
    ComboBoxStatus: TComboBox;
    edtCodCortador: TEdit;
    edtCodFaccao: TEdit;
    DBGridFichaDeFaccao: TDBGrid;
    Label1: TLabel;
    DSDadosProdutos: TDataSource;
    FDQueryProdutos: TFDQuery;
    DSDadosFaccao: TDataSource;
    FDQueryFaccao: TFDQuery;
    FDQueryConsultaFichaFaccao: TFDQuery;
    DSDadosConsultaFichaFaccao: TDataSource;
    Label2: TLabel;
    dtpDataInicial: TCalendarPicker;
    Label3: TLabel;
    dtpDataFinal: TCalendarPicker;
    btnAlterar: TButton;
    BindSourceDB1: TBindSourceDB;
    BindingsList1: TBindingsList;
    LinkFillControlToField2: TLinkFillControlToField;
    LinkControlToField1: TLinkControlToField;
    LinkControlToField2: TLinkControlToField;
    LinkControlToField3: TLinkControlToField;
    LinkPropertyToFieldDateFormat: TLinkPropertyToField;
    UpdateSQLConsultaFicha: TFDUpdateSQL;
    LinkPropertyToFieldDate: TLinkPropertyToField;
    LinkPropertyToFieldDate2: TLinkPropertyToField;
    LinkPropertyToFieldDate3: TLinkPropertyToField;
    btnAttData: TButton;
    Image1: TImage;
    procedure FormCreate(Sender: TObject);
    procedure PreencherComboBoxFaccao;
    procedure PreencherComboBoxProdutos;
    procedure PreencherComboboxStatus;
    procedure edtCodRefChange(Sender: TObject);
    procedure ComboBoxFaccaoChange(Sender: TObject);
    procedure btnConsultarFichaClick(Sender: TObject);
    procedure AjustarLarguraColunas(DBGrid: TDBGrid);
    procedure DSDadosConsultaFichaFaccaoDataChange(Sender: TObject;
      Field: TField);
    procedure btnSalvarClick(Sender: TObject);
  private
    FAtualizandoCalendarios: Boolean; // Variável de controle
    idFaccaoAtivo: Integer;
    attDataEnvio, attDataPrevista, attDataEntrega : TDateTime;
  public
    { Public declarations }
  end;

var
  FormConsultaFichaFaccao: TFormConsultaFichaFaccao;

implementation

{$R *.dfm}

procedure TFormConsultaFichaFaccao.AjustarLarguraColunas(DBGrid: TDBGrid);
var
  i, largura: Integer;
begin
  DBGrid.Columns.BeginUpdate;
  try
    for i := 0 to DBGrid.Columns.Count - 1 do
    begin
      largura := DBGrid.Canvas.TextWidth(DBGrid.Columns[i].Title.Caption) + 20; // Título com padding
      DBGrid.Columns[i].Width := largura;

      DBGrid.DataSource.DataSet.First;
      while not DBGrid.DataSource.DataSet.Eof do
      begin
        largura := Max(largura, DBGrid.Canvas.TextWidth(DBGrid.DataSource.DataSet.Fields[i].AsString) + 20);
        DBGrid.DataSource.DataSet.Next;
      end;
      DBGrid.Columns[i].Width := largura;
    end;
  finally
    DBGrid.Columns.EndUpdate;
  end;
end;

procedure TFormConsultaFichaFaccao.PreencherComboBoxFaccao;
begin
  FDQueryFaccao.Open;
//
  ComboBoxFaccao.Items.Clear;
//
  while not FDQueryFaccao.Eof do
  begin
    ComboBoxFaccao.Items.AddObject(
      FDQueryFaccao.FieldByName('nomeFaccao').AsString,
      TObject(FDQueryFaccao.FieldByName('codFaccao').AsInteger)
    );
    FDQueryFaccao.Next;
  end;
end;

procedure TFormConsultaFichaFaccao.PreencherComboBoxProdutos;
begin
  FDQueryProdutos.Active := true;

  ComboBoxProdutos.Items.Clear;

  while not FDQueryProdutos.Eof do
    begin
      ComboBoxProdutos.Items.Add(FDQueryProdutos.FieldByName('Produto').AsString); // Adiciona os nomes dos produtos ao ComboBox
      FDQueryProdutos.Next;
    end;

  FDQueryProdutos.Close; // Fecha a consulta após carregar os dados
end;

procedure TFormConsultaFichaFaccao.PreencherComboboxStatus;
var
  CaminhoArquivo: string;
begin
  // Caminho do arquivo
  CaminhoArquivo := ExtractFilePath(ParamStr(0)) + 'lista-status-ficha.txt';

  // Verifica se o arquivo existe
  if not FileExists(CaminhoArquivo) then
  begin
    ShowMessage('Arquivo lista-cores.txt não encontrado!');
    Exit;
  end;

  // Limpa os itens do ComboBox e carrega do arquivo
  ComboBoxStatus.Items.Clear;
  ComboBoxStatus.Items.LoadFromFile(CaminhoArquivo);
end;

procedure TFormConsultaFichaFaccao.btnConsultarFichaClick(Sender: TObject);
begin
  // Validação dos filtros
  if Trim(ComboboxProdutos.Text) = '' then
  begin
    ShowMessage('Informe o nome do produto.');
    Exit;
  end;

//  if Trim(edtCodFaccao.Text) = '' then
//  begin
//    ShowMessage('Informe o código da facção.');
//    Exit;
//  end;

  if dtpDataInicial.Date > dtpDataFinal.Date then
  begin
    ShowMessage('A data inicial não pode ser maior que a data final.');
    Exit;
  end;

  // Prepara a consulta
  FDQueryConsultaFichaFaccao.Close;
  FDQueryConsultaFichaFaccao.SQL.Text :=
    'SELECT idFaccao, dataCriacao, ' +
    '       nomeProduto AS Modelo, ' +
    '       corTecido AS Cor, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''P'' THEN quantidadePecas ELSE 0 END) AS Tam_P, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''M'' THEN quantidadePecas ELSE 0 END) AS Tam_M, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''G'' THEN quantidadePecas ELSE 0 END) AS Tam_G, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''GG'' THEN quantidadePecas ELSE 0 END) AS Tam_GG, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''48'' THEN quantidadePecas ELSE 0 END) AS Tam_48, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''50'' THEN quantidadePecas ELSE 0 END) AS Tam_50, ' +
    '       SUM(CASE WHEN tamanhoPecas = ''52'' THEN quantidadePecas ELSE 0 END) AS Tam_52, ' +
    '       statusOrdem AS Status, ' +
    '       STRFTIME(''%d/%m/%Y'', dataCorte) AS DataCorte, ' +
    '       STRFTIME(''%d/%m/%Y'', DataEnvio)  AS DataEnvio, ' +
    '       STRFTIME(''%d/%m/%Y'', DataPrevisao) AS DataPrevisao, ' +
    '       STRFTIME(''%d/%m/%Y'', DataEntrega) AS DataEntrega, ' +
    '       numCorte, numOrdem, codCortador, nomeCortador ' +
    'FROM TBFichaDeFaccao ' +
    'WHERE nomeProduto = :nomeProduto AND ' +
    '      codFaccao = :codFaccao AND ' +
    '      dataCriacao BETWEEN :dataInicial AND :dataFinal ' +
    'GROUP BY nomeProduto, corTecido, statusOrdem ' +
    'ORDER BY idFaccao, dataCriacao, nomeProduto, corTecido';

  // Atribui os parâmetros
  FDQueryConsultaFichaFaccao.ParamByName('nomeProduto').AsString := ComboBoxProdutos.Text;
  FDQueryConsultaFichaFaccao.ParamByName('codFaccao').AsInteger := StrToIntDef(edtCodFaccao.Text, 0);
  FDQueryConsultaFichaFaccao.ParamByName('dataInicial').AsDate := dtpDataInicial.Date;
  FDQueryConsultaFichaFaccao.ParamByName('dataFinal').AsDate := dtpDataFinal.Date;

  // Executa a consulta
  try
    FDQueryConsultaFichaFaccao.Open;
  except
    on E: Exception do
      ShowMessage('Erro ao executar a consulta: ' + E.Message);
  end;

  AjustarLarguraColunas(DBGridFichaDeFaccao);
  //DSDadosConsultaFichaFaccao.DataSet.Edit;
end;

procedure TFormConsultaFichaFaccao.btnSalvarClick(Sender: TObject);
begin
  attDataEnvio := CalendarDataDeEnvio.Date;
  attDataPrevista := CalendarDataPrevista.Date;
  attDataEntrega := CalendarDataDeEntrega.Date;

  // Validação se os campos necessários estão preenchidos
  if ComboBoxStatus.Text = '' then
  begin
    ShowMessage('Informe o status.');
    Exit;
  end;

  // Prepare o comando UPDATE para alterar os dados no banco
  FDQueryConsultaFichaFaccao.SQL.Text :=
    'UPDATE TBFichaDeFaccao ' +
    'SET dataCorte = :dataCorte, ' +
    '    dataEnvio = :dataEnvio, ' +
    '    dataPrevisao = :dataPrevisao, ' +
    '    dataEntrega = :dataEntrega, ' +
    '    statusOrdem = :statusOrdem, ' +
    '    codFaccao = :codFaccao, ' +
    '    nomeFaccao = :nomeFaccao ' +
    'WHERE idFaccao = :idFaccao';  // Certifique-se de passar o ID correto para o WHERE

  // Atribuindo os parâmetros com os valores dos campos e Calendars

  FDQueryConsultaFichaFaccao.ParamByName('dataCorte').AsDate := CalendarDataDeCorte.Date;
  FDQueryConsultaFichaFaccao.ParamByName('dataEnvio').AsDate := attDataEnvio; // CalendarDataDeEnvio.Date;
  FDQueryConsultaFichaFaccao.ParamByName('dataPrevisao').AsDate := attDataPrevista; //CalendarDataPrevista.Date;
  FDQueryConsultaFichaFaccao.ParamByName('dataEntrega').AsDate := attDataEntrega; //CalendarDataDeEntrega.Date;
  FDQueryConsultaFichaFaccao.ParamByName('statusOrdem').AsString := ComboBoxStatus.Text;
  FDQueryConsultaFichaFaccao.ParamByName('idFaccao').AsInteger := idFaccaoAtivo;
  FDQueryConsultaFichaFaccao.ParamByName('codFaccao').AsString := edtCodFaccao.Text;
  FDQueryConsultaFichaFaccao.ParamByName('nomeFaccao').AsString := ComboBoxFaccao.Text;

  // Executa o comando SQL para atualizar os dados no banco
  try
    FDQueryConsultaFichaFaccao.ExecSQL; // Executa o comando UPDATE
    ShowMessage('Dados atualizados com sucesso!');
  except
    on E: Exception do
      ShowMessage('Erro ao salvar os dados: ' + E.Message);
  end;

  PreencherComboBoxStatus;
end;



procedure TFormConsultaFichaFaccao.ComboBoxFaccaoChange(Sender: TObject);
begin
if ComboBoxFaccao.ItemIndex <> -1 then
    edtCodFaccao.Text := IntToStr(Integer(ComboBoxFaccao.Items.Objects[ComboBoxFaccao.ItemIndex]));
end;

procedure TFormConsultaFichaFaccao.DSDadosConsultaFichaFaccaoDataChange(
  Sender: TObject; Field: TField);
var
  dataCorte, dataEnvio, dataPrevisao, dataEntrega: TDateTime;
begin
  FAtualizandoCalendarios := True;
  try
    // Converte as datas do banco para o formato do calendário (dd/mm/yyyy)
    if TryStrToDate(FDQueryConsultaFichaFaccao.FieldByName('dataCorte').AsString, dataCorte) then
      CalendarDataDeCorte.Date := dataCorte
    else
      CalendarDataDeCorte.Date := now;

    if TryStrToDate(FDQueryConsultaFichaFaccao.FieldByName('dataEnvio').AsString, dataEnvio) then
      CalendarDataDeEnvio.Date := dataEnvio ;
//    else
//      CalendarDataDeEnvio.Date := now;

    if TryStrToDate(FDQueryConsultaFichaFaccao.FieldByName('dataPrevisao').AsString, dataPrevisao) then
      CalendarDataPrevista.Date := dataPrevisao   ;
//    else
//      CalendarDataPrevista.Date := now;

    if TryStrToDate(FDQueryConsultaFichaFaccao.FieldByName('dataEntrega').AsString, dataEntrega) then
      CalendarDataDeEntrega.Date := dataEntrega ;
//    else
//      CalendarDataDeEntrega.Date := now;

    idFaccaoAtivo := FDQueryConsultaFichaFaccao.FieldByName('idFaccao').AsInteger;

  finally
    FAtualizandoCalendarios := False;
  end;

end;


procedure TFormConsultaFichaFaccao.edtCodRefChange(Sender: TObject);
var
  CodigoProduto: String;
  RefProduto: String;
begin
  if rbBuscaCodigo.Checked then
  begin
    CodigoProduto := Trim(edtCodRef.Text); // Captura e limpa o texto digitado no TEdit

  // Busca o nome do produto correspondente ao código digitado
  FDQueryProdutos.Close;
  FDQueryProdutos.SQL.Text := 'SELECT nomeProduto as Produto FROM TBProdutos WHERE codProduto = :codProduto';
  FDQueryProdutos.ParamByName('codProduto').AsString := CodigoProduto;
  FDQueryProdutos.Open;

  if not FDQueryProdutos.IsEmpty then
  begin
    // Atualiza o ComboBox com o produto encontrado
    ComboBoxProdutos.Text := FDQueryProdutos.FieldByName('Produto').AsString;

    // Dispara manualmente o evento OnChange do ComboBox
    if Assigned(ComboBoxProdutos.OnChange) then
      ComboBoxProdutos.OnChange(ComboBoxProdutos);
  end
  else
  begin
    // Caso não encontre, limpa o ComboBox
    ComboBoxProdutos.Text := '';
  end;

  FDQueryProdutos.Close; // Fecha a consulta após uso
  end;


  if rbBuscaReferencia.Checked then
  begin
    RefProduto := Trim(edtCodRef.Text); // Captura e limpa o texto digitado no TEdit

  // Busca o nome do produto correspondente à referência digitada
    FDQueryProdutos.Close;
    FDQueryProdutos.SQL.Text := 'SELECT nomeProduto as Produto FROM TBProdutos WHERE refProduto = :refProduto';
    FDQueryProdutos.ParamByName('refProduto').AsString := RefProduto;
    FDQueryProdutos.Open;

    if not FDQueryProdutos.IsEmpty then
    begin
      // Atualiza o ComboBox com o produto encontrado
      ComboBoxProdutos.Text := FDQueryProdutos.FieldByName('Produto').AsString;

      // Dispara manualmente o evento OnChange do ComboBox
      if Assigned(ComboBoxProdutos.OnChange) then
        ComboBoxProdutos.OnChange(ComboBoxProdutos);
    end
    else
    begin
      // Caso não encontre, limpa o ComboBox
      ComboBoxProdutos.Text := '';
    end;

    FDQueryProdutos.Close; // Fecha a consulta após uso
  end;

end;

procedure TFormConsultaFichaFaccao.FormCreate(Sender: TObject);
begin
  FAtualizandoCalendarios := false;
  PreencherComboBoxFaccao;
  PreencherComboBoxStatus;
  PreencherComboBoxProdutos;
end;

end.
