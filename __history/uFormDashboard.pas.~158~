unit uFormDashboard;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Unit2, uFormCadastroTecido, Vcl.Menus,
  VCLTee.TeCanvas, uFormDBPath, uFormCadastroProduto, uFormCortador, Vcl.Styles, Vcl.Themes,
  Vcl.Imaging.pngimage, Vcl.ExtCtrls, uFormCadastroFaccao, uFormFichaFaccao, uFormEstoqueProdutos,
  VclTee.TeeGDIPlus, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, VCLTee.TeEngine, VCLTee.Series, VCLTee.TeeProcs, uDataModulo,
  VCLTee.Chart, VCLTee.DBChart, VCLTee.TeeDBCrossTab, Math, Vcl.WinXCalendars,
  Vcl.Grids, Vcl.DBGrids;

type
  TFormDashboard = class(TForm)
    btnGerarOrdemCorte: TButton;
    btnCadastrarCortador: TButton;
    btnCadastrarTecido: TButton;
    btnCadastrarProdutos: TButton;
    btnCadastrarFaccao: TButton;
    btnCriarFichaFaccao: TButton;
    MainMenu1: TMainMenu;
    Cadastrar1: TMenuItem;
    CadastrarProduto1: TMenuItem;
    CadastrarTecido1: TMenuItem;
    CadastrarCortador1: TMenuItem;
    CadastrarFaccionista1: TMenuItem;
    Editar1: TMenuItem;
    Basededados1: TMenuItem;
    Visualizar1: TMenuItem;
    Aparncia1: TMenuItem;
    Dark1: TMenuItem;
    Light1: TMenuItem;
    Blue1: TMenuItem;
    Default1: TMenuItem;
    Default2: TMenuItem;
    Image2: TImage;
    pnlCadastros: TPanel;
    Label2: TLabel;
    pnlOperacoes: TPanel;
    btnGerenciarEstoque: TButton;
    FDQueryCortadores: TFDQuery;
    DSDadosCortadores: TDataSource;
    Gerar1: TMenuItem;
    GerarOrdemdeCorte1: TMenuItem;
    CriarFichadeFaco1: TMenuItem;
    GerenciarEstoque1: TMenuItem;
    pnlDashboard: TPanel;
    Label4: TLabel;
    Label5: TLabel;
    dtpDataInicial: TCalendarPicker;
    dtpDataFinal: TCalendarPicker;
    btnAtualizar: TButton;
    ChartRankingFaccao: TChart;
    Series2: TBarSeries;
    ChartRankingCorte: TChart;
    BarSeries1: TBarSeries;
    FDQueryFaccao: TFDQuery;
    DSDadosFaccao: TDataSource;
    DBCrossTabSource1: TDBCrossTabSource;
    DBCrossTabSource2: TDBCrossTabSource;
    pnlMenu: TPanel;
    Label1: TLabel;
    Image1: TImage;
    Label3: TLabel;
    ChartRankingProdutos: TChart;
    Series1: THorizBarSeries;
    FDQueryProdutos: TFDQuery;
    DSDadosProdutos: TDataSource;
    DBCrossTabSource3: TDBCrossTabSource;
    procedure btnGerarOrdemCorteClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnCadastrarTecidoClick(Sender: TObject);
    procedure CadastrarTecido1Click(Sender: TObject);
    procedure Basededados1Click(Sender: TObject);
    procedure btnCadastrarProdutosClick(Sender: TObject);
    procedure CadastrarProduto1Click(Sender: TObject);
    procedure btnCadastrarCortadorClick(Sender: TObject);
    procedure btnStyleGlossyClick(Sender: TObject);
    procedure btnOnyxBlueClick(Sender: TObject);
    procedure Dark1Click(Sender: TObject);
    procedure Light1Click(Sender: TObject);
    procedure Blue1Click(Sender: TObject);
    procedure Default1Click(Sender: TObject);
    procedure Default2Click(Sender: TObject);
    procedure btnCadastrarFaccaoClick(Sender: TObject);
    procedure btnCriarFichaFaccaoClick(Sender: TObject);
    procedure btnGerenciarEstoqueClick(Sender: TObject);
    procedure AtualizarRankingCortadores;
    procedure btnAtualizarClick(Sender: TObject);
    procedure CadastrarCortador1Click(Sender: TObject);
    procedure CadastrarFaccionista1Click(Sender: TObject);
    procedure GerarOrdemdeCorte1Click(Sender: TObject);
    procedure CriarFichadeFaco1Click(Sender: TObject);
    procedure GerenciarEstoque1Click(Sender: TObject);
    procedure AtualizarRankingFaccao;
    procedure FormShow(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure AtualizarRankingProdutos;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormDashboard: TFormDashboard;

implementation

{$R *.dfm}


procedure TFormDashboard.AtualizarRankingCortadores;
var
  DataInicial, DataFinal: string;
  Cortador: string;
  TotalPecas: Double;
begin
  // Converte as datas para o formato yyyy-mm-dd
  DataInicial := FormatDateTime('yyyy-mm-dd', dtpDataInicial.Date);
  DataFinal := FormatDateTime('yyyy-mm-dd', dtpDataFinal.Date);

  FDQueryCortadores.Close;

  FDQueryCortadores.SQL.Text :=
  'SELECT ' +
  '    nomeCortador, ' +
  '    SUM(quantidadePecas) AS totalPecas ' +
  'FROM ' +
  '    TBFichaDeFaccao ' +
  'WHERE ' +
  '    dataCriacao BETWEEN :dataInicial AND :dataFinal ' +
  'GROUP BY ' +
  '    nomeCortador ' +
  'ORDER BY ' +
  '    totalPecas DESC';


  FDQueryCortadores.ParamByName('dataInicial').AsString := FormatDateTime('yyyy-mm-dd', dtpDataInicial.Date);
  FDQueryCortadores.ParamByName('dataFinal').AsString := FormatDateTime('yyyy-mm-dd', dtpDataFinal.Date);

  FDQueryCortadores.Open;

  // Limpa os dados do gráfico
  //ChartRankingCorte.Series[0].Clear;

  // Preenche o gráfico com os dados da query
  while not FDQueryCortadores.Eof do
  begin
    Cortador := FDQueryCortadores.FieldByName('nomeCortador').AsString;
    TotalPecas := FDQueryCortadores.FieldByName('totalPecas').AsFloat;

    // Adiciona os dados ao gráfico
    ChartRankingCorte.Series[0].Add(TotalPecas, Cortador);

    FDQueryCortadores.Next;
  end;

  // Exibe mensagem se não houver dados
  if FDQueryCortadores.IsEmpty then
    ShowMessage('Nenhum dado encontrado para o período selecionado.');

  ChartRankingCorte.Refresh;
end;

procedure TFormDashboard.btnGerarOrdemCorteClick(Sender: TObject);
var
  formCorte : TFormGerarOrdemCorte;
begin
  formCorte := TFormGerarOrdemCorte.Create(Self);
  try
    if not Assigned(formCorte) then
    Application.CreateForm(TFormGerarOrdemCorte, FormGerarOrdemCorte);

    formCorte.Show;
  finally
    //formCorte.Free;
  end;

end;

procedure TFormDashboard.btnGerenciarEstoqueClick(Sender: TObject);
var
  formEstoqueProdutos: TFormEstoqueProdutos;
begin
  formEstoqueProdutos := TFormEstoqueProdutos.Create(Self);
  try
    formEstoqueProdutos.ShowModal;
  finally
    formEstoqueProdutos.Free;
  end;
end;

procedure TFormDashboard.btnOnyxBlueClick(Sender: TObject);
begin
  TStyleManager.TrySetStyle('Onyx Blue');
end;

procedure TFormDashboard.btnStyleGlossyClick(Sender: TObject);
begin
  TStyleManager.TrySetStyle('Glossy');
end;

procedure TFormDashboard.btnCadastrarFaccaoClick(Sender: TObject);
var
  formCadastrarFaccao: TFormCadastroFaccao;
begin
  formCadastrarFaccao := TFormCadastroFaccao.Create(Self);
  try
    formCadastrarFaccao.ShowModal;
  finally
    formCadastrarFaccao.Free;
  end;
end;

procedure TFormDashboard.Blue1Click(Sender: TObject);
begin
  TStyleManager.TrySetStyle('Onyx Blue');
end;

procedure TFormDashboard.btnAtualizarClick(Sender: TObject);
begin
  ChartRankingCorte.Series[0].Clear;
  ChartRankingFaccao.Series[0].Clear;
  ChartRankingProdutos.Series[0].Clear;

  AtualizarRankingCortadores;
  AtualizarRankingFaccao;
  AtualizarRankingProdutos;

  DSDadosCortadores.DataSet.Refresh;
  DSDadosFaccao.DataSet.Refresh;
  DSDadosProdutos.DataSet.Refresh;
end;

procedure TFormDashboard.btnCadastrarCortadorClick(Sender: TObject);
begin
  var
  formCadastrarCortador: TFormCadastroCortador;
begin
  formCadastrarCortador := TFormCadastroCortador.Create(Self);
  try
    formCadastrarCortador.ShowModal;
  finally
    formCadastrarCortador.Free;
  end;
end;
end;

procedure TFormDashboard.btnCadastrarProdutosClick(Sender: TObject);
begin
  var
  formCadastrarProduto: TFormCadastrarProdutos;
begin
  formCadastrarProduto := TFormCadastrarProdutos.Create(Self);
  try
    formCadastrarProduto.ShowModal;
  finally
    formCadastrarProduto.Free;
  end;
end;
end;

procedure TFormDashboard.AtualizarRankingFaccao;
var
  DataInicial, DataFinal: string;
  Faccao: string;
  TotalPecas: Double;
begin
  // Converte as datas para o formato yyyy-mm-dd
  DataInicial := FormatDateTime('yyyy-mm-dd', dtpDataInicial.Date);
  DataFinal := FormatDateTime('yyyy-mm-dd', dtpDataFinal.Date);

  FDQueryFaccao.Close;

  FDQueryFaccao.SQL.Text :=
  'SELECT ' +
  '    DISTINCT nomeFaccao, ' +
  '    SUM(quantidadePecas) AS totalPecas ' +
  'FROM ' +
  '    TBFichaDeFaccao ' +
  'WHERE ' +
  '    dataCriacao BETWEEN :dataInicial AND :dataFinal ' +
  '    and nomeFaccao <> '''' ' +
  'GROUP BY ' +
  '    nomeFaccao ' +
  'ORDER BY ' +
  '    totalPecas DESC';


  FDQueryFaccao.ParamByName('dataInicial').AsString := FormatDateTime('yyyy-mm-dd', dtpDataInicial.Date);
  FDQueryFaccao.ParamByName('dataFinal').AsString := FormatDateTime('yyyy-mm-dd', dtpDataFinal.Date);

  FDQueryFaccao.Open;

  // Limpa os dados do gráfico
  //ChartRankingCorte.Series[0].Clear;

  // Preenche o gráfico com os dados da query
  while not FDQueryFaccao.Eof do
  begin
    Faccao := FDQueryFaccao.FieldByName('nomeFaccao').AsString;
    TotalPecas := FDQueryFaccao.FieldByName('totalPecas').AsFloat;

    // Adiciona os dados ao gráfico
    ChartRankingFaccao.Series[0].Add(TotalPecas, Faccao);

    FDQueryFaccao.Next;
  end;

  // Exibe mensagem se não houver dados
  if FDQueryFaccao.IsEmpty then
    ShowMessage('Nenhum dado encontrado para o período selecionado.');

  ChartRankingFaccao.Refresh;
end;

procedure TFormDashboard.AtualizarRankingProdutos;
var
  DataInicial, DataFinal: string;
  Produto: string;
  TotalPecas: Double;
begin
  // Converte as datas para o formato yyyy-mm-dd
  DataInicial := FormatDateTime('yyyy-mm-dd', dtpDataInicial.Date);
  DataFinal := FormatDateTime('yyyy-mm-dd', dtpDataFinal.Date);

  FDQueryProdutos.Close;

  FDQueryProdutos.SQL.Text :=
      'SELECT DISTINCT ' +
      '  nomeProduto, ' +
      '  SUM(quantidadePecas) AS totalPecas ' +
      'FROM ' +
      '  TBFichaDeFaccao ' +
      'WHERE ' +
      '  dataCriacao BETWEEN :dataInicial AND :dataFinal ' +
      'GROUP BY ' +
      '  nomeProduto ' +
      'ORDER BY ' +
      '  totalPecas DESC ' +
      'LIMIT 15';


  FDQueryProdutos.ParamByName('dataInicial').AsString := FormatDateTime('yyyy-mm-dd', dtpDataInicial.Date);
  FDQueryProdutos.ParamByName('dataFinal').AsString := FormatDateTime('yyyy-mm-dd', dtpDataFinal.Date);

  FDQueryProdutos.Open;

  // Limpa os dados do gráfico
  //ChartRankingCorte.Series[0].Clear;

  // Preenche o gráfico com os dados da query
  while not FDQueryProdutos.Eof do
  begin
    Produto := FDQueryProdutos.FieldByName('nomeProduto').AsString;
    TotalPecas := FDQueryProdutos.FieldByName('totalPecas').AsFloat;

    // Adiciona os dados ao gráfico
    ChartRankingProdutos.Series[0].Add(TotalPecas, Produto);

    FDQueryProdutos.Next;
  end;

  // Exibe mensagem se não houver dados
  if FDQueryProdutos.IsEmpty then
    ShowMessage('Nenhum dado encontrado para o período selecionado.');

  ChartRankingProdutos.Refresh;
end;

procedure TFormDashboard.Basededados1Click(Sender: TObject);
var
  formPathDB : TFormPathDB;
begin
  formPathDB := TFormPathDB.Create(Self);
  try
    //if not Assigned(formPathDB) then
    //Application.CreateForm(TFormPathDB, formPathDB);
    formPathDB.ShowModal;
  finally

  end;
end;

procedure TFormDashboard.btnCadastrarTecidoClick(Sender: TObject);
var
  formCadastrarTecido: TFormCadastroTecido;
begin
  formCadastrarTecido := TFormCadastroTecido.Create(Self);
  try
    formCadastrarTecido.ShowModal; // Exibe o formulário como modal, mantendo-o aberto até ser fechado
  finally
    formCadastrarTecido.Free; // Libera o formulário da memória somente após ele ser fechado
  end;
end;

procedure TFormDashboard.btnCriarFichaFaccaoClick(Sender: TObject);
var
  formFichaFaccao: TFormFichaFaccao;
begin
  formFichaFaccao := TFormFichaFaccao.Create(Self);
  try
    formFichaFaccao.ShowModal; // Exibe o formulário como modal, mantendo-o aberto até ser fechado
  finally
    formFichaFaccao.Free; // Libera o formulário da memória somente após ele ser fechado
  end;
end;

procedure TFormDashboard.CadastrarCortador1Click(Sender: TObject);
var
  formCadastrarCortador: TFormCadastroCortador;
begin
  formCadastrarCortador := TFormCadastroCortador.Create(Self);
  try
    formCadastrarCortador.ShowModal;
  finally
    formCadastrarCortador.Free;
  end;
end;


procedure TFormDashboard.CadastrarFaccionista1Click(Sender: TObject);
var
  formCadastrarFaccao: TFormCadastroFaccao;
begin
  formCadastrarFaccao := TFormCadastroFaccao.Create(Self);
  try
    formCadastrarFaccao.ShowModal;
  finally
    formCadastrarFaccao.Free;
  end;
end;

procedure TFormDashboard.CadastrarProduto1Click(Sender: TObject);
var
  formCadastrarProduto: TFormCadastrarProdutos;
begin
  formCadastrarProduto := TFormCadastrarProdutos.Create(Self);
  try
    formCadastrarProduto.ShowModal; // Exibe o formulário como modal, mantendo-o aberto até ser fechado
  finally
    formCadastrarProduto.Free; // Libera o formulário da memória somente após ele ser fechado
  end;
end;

procedure TFormDashboard.CadastrarTecido1Click(Sender: TObject);
var
  formCadastrarTecido: TFormCadastroTecido;
begin
  formCadastrarTecido := TFormCadastroTecido.Create(Self);
  try
    formCadastrarTecido.ShowModal; // Exibe o formulário como modal, mantendo-o aberto até ser fechado
  finally
    formCadastrarTecido.Free; // Libera o formulário da memória somente após ele ser fechado
  end;
end;


procedure TFormDashboard.CriarFichadeFaco1Click(Sender: TObject);
var
  formFichaFaccao: TFormFichaFaccao;
begin
  formFichaFaccao := TFormFichaFaccao.Create(Self);
  try
    formFichaFaccao.ShowModal; // Exibe o formulário como modal, mantendo-o aberto até ser fechado
  finally
    formFichaFaccao.Free; // Libera o formulário da memória somente após ele ser fechado
  end;
end;

procedure TFormDashboard.Dark1Click(Sender: TObject);
begin
  TStyleManager.TrySetStyle('Glossy');
end;

procedure TFormDashboard.Default1Click(Sender: TObject);
begin
  TStyleManager.TrySetStyle('Glow');
end;

procedure TFormDashboard.Default2Click(Sender: TObject);
begin
  TStyleManager.TrySetStyle('Windows');
end;

procedure TFormDashboard.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := caHide;
end;

procedure TFormDashboard.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  formEstoqueProdutos: TFormEstoqueProdutos;
begin

  case Key of

      VK_F5:
        begin
          formEstoqueProdutos := TFormEstoqueProdutos.Create(Self);
          try
            formEstoqueProdutos.ShowModal;
          finally
            formEstoqueProdutos.Free;
          end;
        end;





    end;
end;

procedure TFormDashboard.FormShow(Sender: TObject);
var
  Ano, Mes, Dia: Word;
begin
  // Define o primeiro dia do mês atual como data inicial
  DecodeDate(Date, Ano, Mes, Dia);
  dtpDataInicial.Date := EncodeDate(Ano, Mes, 1);

  // Define a data atual como data final
  dtpDataFinal.Date := Date;

  // Atualiza os gráficos com base no intervalo de datas inicial e final
  AtualizarRankingCortadores;
  AtualizarRankingFaccao;
  AtualizarRankingProdutos;

  DSDadosCortadores.DataSet.Refresh;
  DSDadosFaccao.DataSet.Refresh;
  DSDadosProdutos.DataSet.Refresh;
end;

procedure TFormDashboard.GerarOrdemdeCorte1Click(Sender: TObject);
var
  formCorte : TFormGerarOrdemCorte;
begin
  formCorte := TFormGerarOrdemCorte.Create(Self);
  try
    if not Assigned(formCorte) then
    Application.CreateForm(TFormGerarOrdemCorte, FormGerarOrdemCorte);

    formCorte.Show;
  finally
    //formCorte.Free;
  end;

end;

procedure TFormDashboard.GerenciarEstoque1Click(Sender: TObject);
var
  formEstoqueProdutos: TFormEstoqueProdutos;
begin
  formEstoqueProdutos := TFormEstoqueProdutos.Create(Self);
  try
    formEstoqueProdutos.ShowModal;
  finally
    formEstoqueProdutos.Free;
  end;
end;

procedure TFormDashboard.Light1Click(Sender: TObject);
begin
  TStyleManager.TrySetStyle('Light');
end;

end.
